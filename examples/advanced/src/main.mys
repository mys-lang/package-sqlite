from os.path import Path
from sqlite import Database

DATABASE: Path = Path("the.db")

def create():
    database = Database(DATABASE)
    database.execute("CREATE TABLE tab(foo, bar, baz)")

    print(f"Database '{DATABASE}' created.")

def insert():
    database = Database(DATABASE)

    # First and second insertions. It is *not* recommended to insert
    # rows with execute(). Use prepared statements instead (see
    # below).
    database.execute("INSERT INTO tab VALUES(1, 'one', null)")
    database.execute("INSERT INTO tab VALUES(2,  2.2, 'two')")

    # Insert using a prepared statement, which is faster (only parse
    # once) and safer than using execute() as above.
    statement = database.prepare("INSERT INTO tab VALUES(?, ?, ?)")

    # Third insertion.
    statement.bind_int(1, 3)
    statement.bind_string(2, "three")
    statement.bind_int(3, 333)
    statement.execute()

    # Fourth insertion.
    statement.bind_int(1, 4)
    statement.bind_string(2, "four")
    statement.bind_null(3)
    statement.execute()

    print("Four rows inserted.")

def select():
    database = Database(DATABASE)
    statement = database.prepare("SELECT * FROM tab WHERE foo >= ? ORDER BY foo")
    statement.bind_int(1, 2)
    row = 1

    while statement.fetch():
        print(f"Row {row}:")

        for column in range(3):
            print(" ", statement.column_value_string(u32(column)))

        row += 1

def remove():
    DATABASE.rm(force=True)

    print(f"ToDo: Database '{DATABASE}' destroyed.")

def main(argv: [string]):
    remove()
    create()
    insert()
    select()
